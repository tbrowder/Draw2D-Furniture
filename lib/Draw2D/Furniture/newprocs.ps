%!

/bd{bind def}bind def
/gbb{false charpath flattenpath pathbbox}bd
/ex{exch}bd
/d{def}bd
/gr{grestore}bd
/gs{gsave}bd
/sg{setgray}bd
/cpt{currentpoint}bd
/mt{moveto}bd
/np{newpath}bd
/m{mul}bd
/tr{translate}bd
/a{add}bd
/s{sub}bd

/cvc { %stack: char code (an int)
  /char 1 string def
  char 0 % code char 0
  3 -1 roll put % char 0 code -
  char % leave on stack
}bd

/setscript {
%/currentscale exch def
/ubase currentscale .5 mul def % raise baseline of superscript chars
/lbase currentscale -.2 mul def % lower baseline of superscript chars
/sscale .6 def % relative size of script characters
}bd

/puttext_spec_dict 50 dict def
/puttext_spec { % Stack: string location_code curr_font_scale
           % (position to place--relative to the current point [integer: 0-11]);
           % must have a current and correct font
  puttext_spec_dict begin
  /currentscale ex d
  /code ex d
  /stname ex d
  gs
  cpt tr np
  0 0 mt stname currentscale getbbox_spec
  /ury ex d
  /urx ex d
  /lly ex d
  /llx ex d
  /mx urx llx a .5 m d
  /my ury lly a .5 m d

  0 code eq {/ox mx  neg d /oy my  neg d} if % center of text bounding box positioned at the current point
  1 code eq {/ox llx neg d /oy my  neg d} if % center of left edge of text bounding box positioned at the current point
  2 code eq {/ox llx neg d /oy lly neg d} if % lower left corner of text bounding box positioned at the current point
  3 code eq {/ox mx  neg d /oy lly neg d} if % center of lower edge of text bounding box positioned at the current point
  4 code eq {/ox urx neg d /oy lly neg d} if % lower right corner of text bounding box positioned at the current point
  5 code eq {/ox urx neg d /oy my  neg d} if % center of right edge of text bounding box positioned at the current point
  6 code eq {/ox urx neg d /oy ury neg d} if % upper right corner of text bounding box positioned at the current point
  7 code eq {/ox mx  neg d /oy ury neg d} if % center of upper edge of text bounding box positioned at the current point
  8 code eq {/ox llx neg d /oy ury neg d} if % upper left corner of text bounding box positioned at the current point
  9 code eq {/ox llx neg d /oy 0       d} if % on base line (y of current point), left-justified on current point
 10 code eq {/ox mx  neg d /oy 0       d} if % on base line (y of current point), centered horizontally
 11 code eq {/ox urx neg d /oy 0       d} if % on base line (y of current point), right-justified on current point

  ox oy tr

  gs
  0 sg
  np 0 0 mt stname currentscale printtext_spec
  gr

  gr
  end
} bind def % puttext_spec

/BreakIntoLines_dict 30 dict def
/BreakIntoLines { % stack (text) linelength linespace showflag
  % modified from PS Cookbook, p. 175
  % current point as x, y
  % if show flag is !0, lines are printed, otherwise max linelength is left on stack
  BreakIntoLines_dict begin
  /showflag exch def

  /linespace exch def
  /linelength exch def

  /textstring exch def
  /wordbreak ( ) def
  gsave
  /maxwidth 0 def
  currentpoint translate /sy 0 def
  showflag 0 ne
    { /proc {
        0 sy moveto show /sy sy linespace sub def
      } def }
    { /proc {
        0 sy moveto /sy sy linespace sub def
        curwidth maxwidth gt { /maxwidth curwidth def } if
      } def } ifelse

  /breakwidth wordbreak stringwidth pop def
  /curwidth 0 def
  /lastwordbreak 0 def

  /startchar 0 def
  /restoftext textstring def

  { restoftext wordbreak search
    { /nextword exch def pop
      /restoftext exch def
      /wordwidth nextword stringwidth pop def

      curwidth wordwidth add linelength gt
	{ textstring startchar
	  lastwordbreak startchar sub
	  getinterval proc
	  /startchar lastwordbreak def
	  /curwidth wordwidth breakwidth add def
        }
	{ /curwidth curwidth wordwidth add
		breakwidth add def
	}
        ifelse

	/lastwordbreak lastwordbreak
	nextword length add 1 add def
     }
     {pop exit}
     ifelse
  } loop
  /lastchar textstring length def
  textstring startchar lastchar startchar sub
  getinterval proc
  grestore
  maxwidth
  end
} bind def % BreakIntoLines

/getbboxdict 30 dict def
/getbbox { % stack: string
  % Returns bounding box of string on stack as llx lly urx ury.  must have
  % current font.
  getbboxdict begin
  /str exch def
  0 0 moveto
  /strlen str length def
  % llx and urx come from first and last characters
  % first
  /tstr 3 string def
  str 0 1 getinterval tstr cvs gbb
  pop pop pop /llx exch def
  % last
  str strlen 1 sub 1 getinterval tstr cvs gbb
  pop /urx exch def
  str strlen 1 sub 1 getinterval tstr cvs stringwidth pop
  /wx exch def /urx urx wx sub def % want just the extra bit
  /lly 0 def
  /ury 0 def
  /width 0 def
  str {
    cvc
    /c exch def
    0 0 moveto c gbb
    /uy exch def pop /ly exch def pop
    lly ly lt { /lly ly def } if
    ury uy gt { /ury uy def } if
    c stringwidth pop /wx exch def
    /width width wx add def
  } forall
  /urx urx width add def
  % leave params on stack
  llx lly urx ury
  end
} bind def % getbbox

/getbbox_spec_dict 30 dict def
/getbbox_spec { % stack: string currfontscale
  % Returns bounding box of string on stack as llx lly urx ury.  must have
  % current font. Special handling for '_{nn}', '^{nn}', and '{nn}'. For now
  % first and last characters must not be special.

  % Symbol font: degree \260  minus: \055
  % normal fonts: em dash: \320 en dash: \261

  getbbox_spec_dict begin
  gs
  /currentscale exch def
  /str exch def
  % currentscale
  setscript
  /strlen str length def
  /prevchar ( ) def
  % llx and urx come from first and last characters
  % first
  0 0 moveto
  /tstr 3 string def
  str 0 1 getinterval tstr cvs gbb
  pop pop pop /llx exch def
  % last
  0 0 moveto
  str strlen 1 sub 1 getinterval tstr cvs gbb
  pop /urx exch def
  /lly 0 def
  /ury 0 def
  /width 0 def
  /inspec 0 def
  /spechar 0 def
  /subscript 0 def % sub
  /script 0 def % sub or super
  /skip 0 def
  str {
    cvc /c exch def
    % c special?
    c (_) eq { /subscript 1 def /script 1 def /skip 1 def } if
    c (^) eq {                  /script 1 def /skip 1 def } if
    c ({) eq { script 1 ne { /spechar 1 def   /skip 1 def } if } if
    c (}) eq { /inspec 0 def /script 0 def /subscript 0 def
               /spechar 0 def                 /skip 1 def } if
    gsave
    skip 0 eq {
      spechar 1 eq {
        /Symbol currentscale selectfont
      } if
      script 0 eq { 0 0 moveto}
        {
        currentfont currentscale sscale mul selectfont
        subscript 1 eq { 0 lbase moveto }{ 0 ubase moveto } ifelse
      } ifelse

      c gbb
      /uy exch def pop /ly exch def pop
      lly ly lt { /lly ly def } if
      ury uy gt { /ury uy def } if
      c stringwidth pop /wx exch def
      /width width wx add def
    }
    { /skip 0 def } ifelse
    grestore

  } forall
  gr
  llx lly urx ury
  end
} bind def % getbbox_spec

/printtext_spec_dict 30 dict def
/printtext_spec { % stack: string  currfontscale
  % Prints text with special characters embedded.  Special handling for
  % '_{nn}', '^{nn}', and '{nn}'. For now first and last characters must not
  % be special.

  % Symbol font: degree \260  minus: \055
  % normal fonts: em dash: \320 en dash: \261
  printtext_spec_dict begin

  /currentscale exch def
  /str exch def
  %currentscale
    setscript
  currentpoint /cy exch def /cx exch def
  /inspec 0 def
  /spechar 0 def
  /subscript 0 def % sub
  /script 0 def % sub or super
  /skip 0 def
  /tstr 3 string def
  str {
    cvc  /c exch def
    cx cy moveto
    % c special?
    c (_) eq { /subscript 1 def /script 1 def    /skip 1 def } if
    c (^) eq {                  /script 1 def    /skip 1 def } if
    c ({) eq { script 1 ne { /spechar 1 def } if /skip 1 def } if
    c (}) eq { /inspec 0 def /script 0 def /subscript 0 def
               /spechar 0 def                    /skip 1 def } if

    gsave
    skip 0 eq {
      spechar 1 eq {
        /Symbol currentscale selectfont
      } if
      script 1 eq {
        currentfont currentscale sscale mul selectfont
        subscript 1 eq { 0 lbase rmoveto }{ 0 ubase rmoveto } ifelse
      } if

      c show
      currentpoint pop /cx exch def
    }
    { /skip 0 def } ifelse

    grestore
  } forall
  end
} bind def % printtext_spec

/wraptitle_dict 30 dict def
/wraptitle { % 7 args on stack: (fig num) space (title) totalwidth sx sy linespace
  % must have current font. sx and sy are midpoint on baseline of title start.
  wraptitle_dict begin
  /linespace exch def
  /sy exch def
  /sx exch def
  /totalwidth exch def
  /title exch def
  /space exch def
  /fig exch def

  gsave sx sy translate fig stringwidth pop /fwidth exch def
  /twidth totalwidth fwidth sub space sub def
  % print fig num
%  totalwidth -.5 mul 0 moveto fig show
%  totalwidth  .5 mul twidth sub 0 translate

  % wordwrap title fig show
  0 0 moveto title twidth linespace 0 BreakIntoLines % get max linewidth

  /twidth exch def
  /totalwidth fwidth space add twidth add def
  totalwidth -.5 mul 0 moveto fig show
  totalwidth  .5 mul twidth sub 0 translate
  0 0 moveto title twidth linespace 1 BreakIntoLines

  grestore
  end
} bind def % wrap title

%0 0 moveto (30{\260}) 16 puttext_spec

%0 -20 moveto (30_{2}) 16 puttext_spec

/Times-Bold 12 selectfont
%0 -40 moveto (30{\260} az, CEP_{N} 20.2) 12 puttext_spec

72 300 translate
/tw 6.5 72 mul def

(FIGURE 10-2.) 10

((U) THE OPTIMUM WEAPON EFFECTIVENESS AGAINST THE\
 AVERAGE TARGET FOR THE GBU-12 D/E GIVEN A HIT SOMETIMES (RUN ID 32))

tw

tw .5 mul

0

15

wraptitle

0 30 moveto (30_{N}) 10 16 puttext_spec
0 60 moveto (30{\260}) 10 16 puttext_spec

0 90 moveto (30_{2}) 10 16 puttext_spec

showpage

#!/usr/bin/env raku

use Draw2D::Furniture;
use Draw2D::Furniture::Classes;
use Draw2D::Furniture::Fonts;

my $ifil = '';
my $P = $*PROGRAM.basename;

my $ids        = 0; # output id list only
my $codes      = 0; # output id list only
my $draw       = 0; # output drawings only
my $all        = 0; # all lists and drawings
my $list       = 0; # the master list only (default if no output is selected)

my $font       = 'Courier-Bold';
my $no-type    = 0; # if true, don't show the TYPE of furniture in caps
my $list-order = 0; # if true, on master list show furniture by input list order, not by ID order
my $debug      = 0;
my $show-codes = 0; # if true, show codes and exit
my $cli-scale; # ($in-per-ft) a hack for on-the-fly scale changes (only for that run)

my $squeeze = 0; # shows data in the upper left corner of images
if !@*ARGS {
    say qq:to/HERE/;
    Usage: $P <formatted input file>
                OR
           $P <formatted input file>
                  [list][ids][codes][all][draw]
                  [show-codes][scale=X][list-order][debug[=N]]
                  [no-type][font=X][Fonts]

    Note: If the first argument is other than a readable file in the
          proper format, the user will be prompted for required inputs
          to produce such a file. (INCOMPLETE AT THE MOMENT)

    The default output is a master list of all furniture by
    room and in unique ID order within each room. Other output types
    are individually selectable or all types may be selected. All
    outputs are in PDF format.

    The optional scale is a number representing page inches per
    real feet. The default is 0.25 (i.e., 1/4 inch per foot, a
    value commonly used in house blueprints).

    The 'list-order' option shows furniture, by room, in the
    order in the read-only master input file.

    The 'no-type' option turns off the all-caps TYPE of each object.

    The 'font=X' option selects one of the standard fonts provided
    with PostScript or one of the other free fonts available 
    from various sources. Use the 'Fonts' option to
    show the list of usable fonts.

    Produces (with appropriate option):

      1. A pdf document listing rooms and furniture

      2. Lists by ID and individual codes

      3. An PDF file with furniture numbers and other data
         (which may overflow) for cutting out and placing on
         building plans. By default, items are scaled 1/4\"
         to the foot to match typical US house blueprints.
         A different scale may be entered into the formatted
         input file or the command line.
    HERE

    exit;
}

for @*ARGS {
    note "DEBUG arg: '$_'";
    when /^ debug '=' (\d+) / {
         $debug = +$0;
    }
    when /^ de / { $debug   = 1 }
    when /^ s  / { $squeeze = 1 }
    when /^ 'scale=' (\S+) / {
         $cli-scale  = +$0; # default is 0.25
    }
    when /^ 'font=' (\S+) / {
        $font = ~$0;
        unless %known-fonts{$font}:exists {
            show-fonts;
            exit;
        }
        note "DEBUG: found font=$font"
    }
    when /^ F / {
        show-fonts;
        exit;
    }

    when /^ n/  { $no-type = 1 }
    # output types
    when /^ d / { $draw  = 1 }
    when /^ i / { $ids   = 1 }
    when /^ c / { $codes = 1 }
    when /^ l / { $list  = 1 }
    when /^ a / { $list=$codes=$ids=$draw=1 }

    default { $ifil = $_ }
}

if !$ifil.IO.f {
    # we step the user through aborting or creating
    # a formatted file for further use
    say "You have not entered a readable file name.";
    my $resp = prompt "Do you want to create a file for entering furniture data? (Y/n) => ";
    if $resp !~~ /^ :i y / {
        say "Okay, goodbye.";
        exit
    }

    my $title    = prompt "Project name or title: ";
    my $basename = prompt "A unique'basename' (with no spaces) for the input/output files: ";
    my $creator  = prompt "Created by: ";
    my $date     = now.DateTime.Str;
    my $p = Project.new: :$title, :$basename, :$creator, :$date;

    my $scale    = prompt "Scale (if not 1/4 in/ft): ";
    my $site     = prompt "Site name: ";

    my @addr;
    $resp = prompt "Do you want to add contact data (Y/n) => ";
    if $resp ~~ /^ :i y / {
        say "Okay. You can add contact data at the following prompts.";
        say "Enter an empty line to finish.";
        while True {
            my $addr = prompt "address line: ";
            last if $addr !~~ /\S+/;
            @addr.push: $addr;
        }
        # put the lines into the project instance
    }

    my @notes;
    $resp = prompt "Do you want to add any notes or other information (Y/n) => ";
    if $resp ~~ /^ :i y / {
        say "Okay. You can add notes at the following prompts.";
        say "Enter an empty line to finish.";
        while True {
            my $note = prompt "note line: ";
            last if $note !~~ /\S+/;
            @notes.push: $note;
        }
        # put the lines into the project instance
    }
    if 1 {
        note "DEBUG address lines:";
        .note for @addr;
        note "DEBUG note lines:";
        .note for @notes;
        note "DEBUG early exit before saving and writing inp file."; exit;
    }

    create-master-file $p;

    print qq:to/HERE/;
    See your master file for further inputs: '{$p.inp}'
    You may change header values in the file (including the default scale) if you wish.
    Now you may start entering furniture by room in file '{$p.inp}'.
    You should run that file as input to 'draw2d' often to ensure formatting is correct.
    HERE
    exit
}

if not ($list or $draw or $ids or $codes) {
    # default
    $list = 1;
}

my $p = Project.new;
if $cli-scale.defined {
    $p.scale = $cli-scale;
}

my @ofils; # list of output files generated
my @rooms; # list of room objects containing furniture objects
@rooms = read-data-file $ifil, :$p, :$no-type, :$debug;
exit if $show-codes;

write-lists(@rooms, @ofils, :$p, :$list, :$ids, :$codes, :$no-type, :$debug);
write-drawings(@rooms, @ofils, :$p, :$squeeze, :$debug) if $draw;

say "Normal end.";
my $n = +@ofils;
if $n {
   @ofils .= unique;
   my $s = $n > 1 ?? 's' !! '';
   say "See output file$s:";
   say "  $_" for @ofils;
}
else {
     say "No files generated.";
}

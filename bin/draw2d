#!/usr/bin/env raku

use Draw2D::Furniture;
use Draw2D::Furniture::Classes;

my $ifil = '';
my $P = $*PROGRAM.basename;

my $ids        = 0; # output id list only
my $codes      = 0; # output id list only
my $draw       = 0;
my $all        = 0; # all lists and drawings
my $list       = 0; # the master list

my $no-type    = 0; # don't show the TYPE of furniture in caps
my $list-order = 0; # on master list show furniture by input list order, not by ID order
my $debug      = 0;
my $show-codes = 0; # show codes and exit
my $cli-scale; # ($in-per-ft) a hack for on-the-fly scale changes (only for that run)

my $squeeze = 0; # shows data in the upper left corner of images
if !@*ARGS {
    say qq:to/HERE/;
    Usage: $P <formatted input file>
                OR
           $P <formatted input file>
                  [ids][codes][all][draw]
                  [show-codes][scale=X][list-order][debug[=N]]
                  [no-type]

    Note: If the first argument is other than a readable file in the 
          proper format, the user will be prompted for required inputs 
          to produce such a file. INCOMPLETE AT THE MOMENT)

    The default output is a msster list of all furniture by
    room and in unique ID order within each room. Other output types
    are individually selectable or all types may be selected. All
    outputs are in PDF format.

    The optional scale is a number representing page inches per
    real feet. The default is 0.25 (i.e., 1/4 inch per foot, a
    value commonly used in house blueprints).

    The 'list-order' option shows furniture, by room, in the
    order in the read-only master input file.

    The 'no-type' option turns off the all-caps TYPE of each object.

    Produces:

      1. A pdf document listing rooms and furniture

      2. Optional lists by ID and individual codes.

      3. An optional pdf file with furniture numbers and other data
         (which may overflow) for cutting out. Items are scaled 1/4\"
         to the foot to match typical house blueprints.  A different
         scale may be entered into the formatted input file or the
         cmmand line.
    HERE

    exit;
}

for @*ARGS {
    when /^ debug '=' (\d+) / {
         $debug = +$0;
    }
    when /^ de / { $debug   = 1 }
    when /^ s  / { $squeeze = 1 }
    when /^ 'scale=' (\S+) / {
         #$in-per-ft = +$0; # default is 0.25
         $cli-scale  = +$0; # default is 0.25
    }
    when /^ n/  { $no-type = 1 }
    # output types
    when /^ d / { $draw  = 1 }
    when /^ i / { $ids   = 1 }
    when /^ c / { $codes = 1 }
    when /^ l / { $list  = 1 }
    when /^ a / { $list=$codes=$ids=$draw=1 }

    default { $ifil = $_ }
}

if !$ifil.IO.f {
    # we step the user through aborting or creating
    # a formatted file for further use
    say "You have not entered a readable file name.";
    my $resp = prompt "Do you want to create a file for entering furniture data? (Y/n) => ";
    if $resp !~~ /^ :i y / {
        say "Okay, goodbye.";
        exit
    }

    my $title    = prompt "Project name or title: ";
    my $basename = prompt "A unique'basename' (with no spaces) for the input/output files: ";
    my $creator  = prompt "Created by: ";
    my $date     = now.DateTime.Str;
    my $p = Project.new: :$title, :$basename, :$creator, :$date;
    if $cli-scale.defined {
        $p.scale = $cli-scale;
    }

    $resp = prompt "Do you want to add contact data (Y/n) => ";
    if $resp ~~ /^ :i y / {
        say "Okay.";
        my $addr = prompt qq:to/HERE/;
        You can add contact date i
        HERE
    }

    $resp = prompt "Do you want to add any notes or other information (Y/n) => ";
    if $resp ~~ /^ :i y / {
        say "Okay.";
    }

    create-master-file $p;

    print qq:to/HERE/;
    See your master file for further inputs: '{$p.inp}'
    You may change header values in the file (including the default scale) if you wish.
    Now you may start entering furniture by room in file '{$p.inp}'.
    You should run that file as input to 'draw2d' often to ensure formatting is correct.
    HERE
    exit
}

if not ($list or $draw or $ids or $codes) {
    # default
    $list = 1;
}

my $p = Project.new;
if $cli-scale.defined {
    $p.scale = $cli-scale;
}

my @ofils; # list of output files generated
my @rooms; # list of room objects containing furniture objects
@rooms = read-data-file $ifil, :$p, :$no-type, :$debug;
exit if $show-codes;

write-lists(@rooms, @ofils, :$p, :$list, :$ids, :$codes, :$no-type, :$debug);
write-drawings(@rooms, @ofils, :$p, :$squeeze, :$debug) if $draw;

say "Normal end.";
my $n = +@ofils;
if $n {
   @ofils .= unique;
   my $s = $n > 1 ?? 's' !! '';
   say "See output file$s:";
   say "  $_" for @ofils;
}
else {
     say "No files generated.";
}
